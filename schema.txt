DROP TABLE IF EXISTS MANAGERS; 
DROP TABLE IF EXISTS TRAININGS;
DROP TABLE IF EXISTS TEAMMEMBERS; 
DROP TABLE IF EXISTS TEAMS;
DROP TABLE IF EXISTS TOURNAMENTS;
DROP TABLE IF EXISTS MATCHES;
DROP TABLE IF EXISTS REFEREES;
DROP TABLE IF EXISTS VENUES;
DROP TABLE IF EXISTS RESULTS;
DROP TABLE IF EXISTS POINTSTABLE;

DROP TRIGGER IF EXISTS validate_email_before_insert_manager; 
DROP TRIGGER IF EXISTS delete_manager;
DROP TRIGGER IF EXISTS delete_team;

DROP VIEW IF EXISTS points;


-- ORDER OF TABLE CREATION : MANAGER -> TEAM -> TEAM_MEMBERS -> TRAINING , TOURNAMENTS -> REFEREES -> VENUE -> MATCHES -> RESULTS -> POINTS_TABLE
CREATE TABLE MANAGERS (
MANAGERID INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,
MANAGERNAME TEXT NOT NULL,
SALARY INTEGER,
AGE INTEGER NOT NULL,
EMAIL TEXT NOT NULL
); 

CREATE TABLE TEAMS (
TEAMID INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,
TEAMNAME TEXT NOT NULL ,
SPONSOREDBY TEXT ,
TEAMCAPTAIN TEXT NOT NULL,
MANAGERID INTEGER NOT NULL ,
FOREIGN KEY (MANAGERID) REFERENCES MANAGERS(MANAGERID)
); 

CREATE TABLE TEAMMEMBERS (
MEMBERID INTEGER NOT NULL PRIMARY KEY  AUTOINCREMENT,
MEMBERNAME TEXT NOT NULL,
TEAMID INTEGER NOT NULL ,
COACHID INTEGER ,
POSITION TEXT ,  
FOREIGN KEY (TEAMID) REFERENCES TEAMS(TEAMID) 
);

CREATE TABLE TRAININGS (
TRAININGID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
COACHID INTEGER NOT NULL,
DETAILS TEXT,
DURATION INTEGER  NOT NULL,
TEAMID INTEGER NOT NULL,
FOREIGN KEY (COACHID) REFERENCES TEAM_MEMBERS(COACHID),
FOREIGN KEY (TEAMID) REFERENCES  TEAMS(TEAMID)
);

CREATE TABLE TOURNAMENTS (
TOURNAMENTID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
TOURNAMENTNAME TEXT NOT NULL,
REGISTRATIONFEES INTEGER,
WINNINGPRIZE INTEGER,
ORGANIZER TEXT NOT NULL
);

CREATE TABLE REFEREES (
REFEREEID INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,
REFEREENAME TEXT NOT NULL
);

CREATE TABLE VENUES (
VENUEID INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,
VENUENAME TEXT NOT NULL,
LOCATION TEXT NOT NULL
);

CREATE TABLE MATCHES (
MATCHID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
TOURNAMENTID INTEGER NOT NULL,
VENUEID INTEGER NOT NULL,
REFEREEID INTEGER NOT NULL,
FOREIGN KEY (TOURNAMENTID) REFERENCES TOURNAMENTS(TOURNAMENTID),
FOREIGN KEY (VENUEID) REFERENCES  VENUES(VENUEID),
FOREIGN KEY (REFEREEID) REFERENCES  REFEREES(REFEREEID) 
);

CREATE TABLE RESULTS (
RESULTID INTEGER NOT NULL PRIMARY KEY ,
OPPONENTA TEXT NOT NULL,
OPPONENTB TEXT NOT NULL,
SCOREA INTEGER NOT NULL,
SCOREB INTEGER NOT NULL


);

CREATE TABLE POINTSTABLE (
TEAMID INTEGER NOT NULL,
TOURNAMENTID INTEGER NOT NULL,

POINTS INTEGER NOT NULL,
MATCHPLAYED INTEGER NOT NULL,
WINCOUNT INTEGER NOT NULL,
LOSSCOUNT INTEGER NOT NULL,

PRIMARY KEY (TEAMID , TOURNAMENTID),
FOREIGN KEY (TEAMID) REFERENCES TEAMS(TEAMID),

FOREIGN KEY (TOURNAMENTID) REFERENCES TOURNAMENT(TOURNAMENTID)
); 

 
CREATE TRIGGER validate_email_before_insert_manager 
   BEFORE INSERT ON MANAGERS
BEGIN
   SELECT
      CASE
	WHEN NEW.email NOT LIKE '%_@__%.__%' THEN
   	  RAISE (ABORT,'Invalid email address')
       END;
END;

CREATE TRIGGER delete_manager
	AFTER DELETE ON  MANAGERS
	FOR EACH ROW
BEGIN
	DELETE FROM TEAMS WHERE MANAGERID = old.MANAGERID;
END;

CREATE TRIGGER delete_team
	AFTER DELETE ON  TEAMS
	FOR EACH ROW
BEGIN
	DELETE FROM TEAMMEMBERS WHERE TEAMID = old.TEAMID;
END;



